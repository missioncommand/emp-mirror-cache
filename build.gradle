buildscript {
    ext {
        version_wildfly_swarm = "2017.2.0"
    }
    
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "com.netflix.nebula:nebula-publishing-plugin:4.9.1"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.0.RELEASE"
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.1"
        //classpath "org.wildfly.swarm:wildfly-swarm-plugin:${version_wildfly_swarm}"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.13"
    }
}

ext {
    versionFile = new File(project.rootDir, 'gradle.properties')
    
    empUsername = System.getenv("CI_USERNAME") ?: empUsername
    empPassword = System.getenv("CI_PASSWORD") ?: empPassword

    bintrayUser = System.getenv("BINTRAY_USER") ?: project.hasProperty('bintrayUser') ? bintrayUser : ''
    bintrayKey  = System.getenv("BINTRAY_KEY")  ?: project.hasProperty('bintrayKey') ? bintrayKey : ''

    version_cmapi       = "0.0.7"
    version_protoc      = "3.2.0"
    version_logback     = "1.1.11"
    version_ws_undertow = "1.2.9.Final"
    version_ws_nv       = "1.31"
    
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7
}

allprojects {
    group = "mil.army.missioncommand"
    
    apply plugin: 'io.spring.dependency-management'
    
    dependencyManagement {
        imports {
            mavenBom "org.wildfly.swarm:bom-all:${version_wildfly_swarm}"
        }
        
        dependencies {
            dependency ("org.cmapi.primitives:common-map-geospatial-notation:${version_cmapi}")
            
            dependency ("ch.qos.logback:logback-classic:${version_logback}")
            
            dependency ("com.google.protobuf:protobuf-java:${version_protoc}")
            dependency ("com.google.protobuf:protobuf-java-util:${version_protoc}")
            
            dependency ("uk.gov.nationalarchives.thirdparty.netbeans:org-netbeans-swing-outline:7.2")
            
            dependency ("io.undertow:undertow-websockets-jsr:${version_ws_undertow}")
            dependency ("com.neovisionaries:nv-websocket-client:${version_ws_nv}")
        }
    }
    
    repositories {
        mavenLocal()
        jcenter()
        //mavenCentral()
		
        maven {
            url 'https://repository.jboss.org/nexus/content/groups/public-jboss'
        }
		
		maven {
			url = "https://nexus.di2e.net/nexus/content/repositories/releases/"
			credentials {
				username empUsername
				password empPassword
			}
		}
    }
}

configure(publishableModules()) {
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'com.jfrog.artifactory'
    apply from: "${rootDir}/gradle/bintray.gradle"
}

task bintray {
    group 'Publishing'
    description 'Publish artifacts to Bintray'

    dependsOn publishableModules().bintrayUpload
}

task wrapper(type: Wrapper, description: "Generates gradlew[.bat] scripts") {
    gradleVersion = '3.4.1'
}

task nextMinorVersion(description: "Increments the version property in ${versionFile}.") {
    doFirst {
        nextMinorVersion()
    }
}

if (JavaVersion.current().isJava8Compatible()) { // disable lint for java8
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

def publishableModules() {
    //subprojects.findAll { it.pluginManager.hasPlugin('org.gradle.maven-publish') } // MavenPublishPlugin
    [
          project(":mirrorcache-api")
        , project(":mirrorcache-model")
        , project(":mirrorcache-service")
        //, project(":mirrorcache-client")
        , project(":mirrorcache-impl-transport-ws-nv")
        , project(":mirrorcache-impl-transport-ws-undertow")
    ]
}

void nextMinorVersion() {
    def version = readVersion()

    def octet = version['version'].split("\\.|-")

    def versionMajor = octet[0] as int
    def versionMinor = octet[1] as int
    def versionPatch = 0

    versionMinor++

    if (project.hasProperty('isSnapshot')) {
        version['version'] = "${versionMajor}.${versionMinor}.${versionPatch}-SNAPSHOT".toString()
    } else {
        version['version'] = "${versionMajor}.${versionMinor}.${versionPatch}".toString()
    }

    println "Setting version to: ${version['version']}"

    def stream = new FileOutputStream(versionFile)
    try {
        version.store(stream, null)
    } finally {
        stream.close()
    }
}

Properties readVersion() {
    def version = new Properties()
    def stream
    try {
        stream = new FileInputStream(versionFile)
        version.load(stream)
    } catch (FileNotFoundException e) {
        e.printStackTrace();
    } finally {
        if (stream != null) stream.close()
    }
    return version
}